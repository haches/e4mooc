/**
 * 
 */
package ch.ethz.e4mooc.server.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.Map;


/**
 * The DAO class (Data Access Object) provides 
 * access to the functions that are used to store
 * logging data of the E4MOOC application.
 * 
 * @author hce
 *
 */
public class DAO {
	
	// Create connection to mySql server
	private static Connection getConn() {

		Connection conn = null;
		// Database URL
		String url = "jdbc:mysql://localhost:3306/";
		// Database name
		String db = "e4mooc";
		String driver = "com.mysql.jdbc.Driver";
		// Mysql's user
		String user = DbPassword.dbUserName;
		// Mysql's password
		String pass = DbPassword.dbPassword;

		try {
			Class.forName(driver).newInstance();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		try {
			conn = DriverManager.getConnection(url + db, user, pass);
		} catch (SQLException e) {
			System.err.println("Mysql Connection Error: ");
			e.printStackTrace();
		}
		return conn;
	}
	
	/**
	 * Stores information about a client's request in the server's DB.
	 * @param projectName the name of the project that the request is targeting
	 * @param userId id of the user (can be an empty string if user is unknown)
	 * @param groupId the id of the user's group (can be an empty string if unknown)
	 * @param session the session in which the request is made
	 * @param type the type of request made
	 * @return the key that was generated for this db entry (-1 in case of an exception)
	 */
	public static int storeRequest(String projectName, String userId, String groupId, String session, RequestType type) {
		
		int generatedKey = -1;
		
		try {
			PreparedStatement stmt = getConn().prepareStatement(storeRequestCommand, Statement.RETURN_GENERATED_KEYS);
			
			stmt.setString(1, userId);
			stmt.setString(2, groupId);
			stmt.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
			stmt.setString(4, session);
			stmt.setInt(5, type.getIdValue());
			stmt.setString(6, projectName);
			
			stmt.execute();
			
			// get the key that was generated
			ResultSet rs = stmt.getGeneratedKeys();
			if(rs.next())
				generatedKey = rs.getInt(1); 
			
			stmt.close();
			
		} catch (SQLException e) {
			System.out.println("Exception in DAO.storeRequest."); 
			e.printStackTrace();
		}
		
		return generatedKey;
	}
	
	/**
	 * Stores information about the client's test results in the server's DB.
	 * @param requestId the id in the DB's "request" table of the request that belongs to this test summary
	 * @param testResult an integer whose binary representation defines which test passed/failed
	 * @param numTestsPassed how many test cases have passed
	 * @param numTestsFailed how many test cases have failed
	 * @return the key that was generated by the DB for this entry (-1 in case of an exception)
	 */
	public static int storeTestSummary(int requestId, int testResult, int numTestsPassed, int numTestsFailed) {
		
		int generatedKey = -1;
		
		try {
			PreparedStatement stmt = getConn().prepareStatement(storeTestSummaryCommand, Statement.RETURN_GENERATED_KEYS);
			
			stmt.setInt(1, requestId);
			stmt.setInt(2, testResult);
			stmt.setInt(3, numTestsPassed);
			stmt.setInt(4, numTestsFailed);
			
			stmt.execute();
			
			// get the key that was generated
			ResultSet rs = stmt.getGeneratedKeys();
			if(rs.next())
				generatedKey = rs.getInt(1);
			
			stmt.close();

		} catch (SQLException e) {
			System.out.println("Exception in DAO.storeTestResults."); 
			e.printStackTrace();
		}
		
		return generatedKey;
	}
	
	
	/**
	 * Stores the details about a test run, i.e. the code that was tested.
	 * @param testSummaryId the id in the DB's "test_summary" table of the request that belongs to this test details
	 * @param codeMap a map where the keys are class names and the values are the class texts
	 */
	public static void storeTestDetails(int testSummaryId, Map<String, String> codeMap) {
		
		try {
			PreparedStatement stmt = getConn().prepareStatement(storeTestDetailsCommand);

			// we create an entry for every code-file the user send
			for(String className: codeMap.keySet()) {
				stmt.setInt(1, testSummaryId);
				stmt.setString(2, className);
				stmt.setString(3, codeMap.get(className));
				
				stmt.execute();
			}
			
			stmt.close();

		} catch (SQLException e) {
			System.out.println("Exception in DAO.storeTestResults."); 
			e.printStackTrace();
		}		
	}
	
	
	/** name of the DB table that stores data about requests */
	private static final String tableNameRequest = "request";
	/** name of the DB table that stores test summaries */
	private static final String tableTestSummary = "test_summary";
	/** name of the DB table that stores details about a test */
	private static final String tableTestDetails = "test_details";
	
	/** SQL command to store data about a request */
	private static final String storeRequestCommand = "INSERT INTO " + tableNameRequest + " (user_id, group_id, timestamp, session, request_type_id, project_name) VALUES (?, ?, ?, ?, ?, ?);";
	/** SQL command to store the summary of a test */
	private static final String storeTestSummaryCommand = "INSERT INTO " + tableTestSummary + " (request_id, test_result, num_tests_passed, num_tests_failed) VALUES (?, ?, ?, ?);";
	/** SQL command to store the details of a test result */
	private static final String storeTestDetailsCommand = "INSERT INTO " + tableTestDetails + " (test_summary_id, class_name, class_text) VALUES (?, ?, ?);";
			 
}
